# -*- coding: utf-8 -*-
"""Data Cleaning_Persistent Feature

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zXVEmo_H_QYagHjEi1AsSszm4r1KF_9h
"""

pip install numpy gdal ripser matplotlib

import cv2
import numpy as np
import ripser

# Load TIF image
image_path = "/content/0506_vik.tif"
image = cv2.imread(image_path)

# Convert RGB image to grayscale
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply topological data analysis
diagrams = ripser.ripser(gray_image)['dgms']

# Visualize persistence diagrams or other TDA features
# (Visualization code depends on the chosen library)

# Further analysis and interpretation of the results

pip install persim

import cv2
import numpy as np
import ripser
from persim import plot_diagrams

# List of paths to the TIF files
tif_file_paths = [
     "/content/0506_vik.tif",
    "/content/0607_vik.tif",
    "/content/0708_vik.tif",
    "/content/0809_vik.tif",
    "/content/0910_vik.tif",
    "/content/1011_vik.tif",
    "/content/1112_vik.tif",
    "/content/1213_vik.tif",
    "/content/1214_vik.tif",
    "/content/1415_vik.tif",

    # Add paths to the rest of your TIF files
]

# Function to perform TDA on an image
def perform_tda(image):
    # Convert RGB image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply topological data analysis
    diagrams = ripser.ripser(gray_image)['dgms']

    return diagrams

# Iterate through each TIF file path
for file_path in tif_file_paths:
    # Load TIF image
    image = cv2.imread(file_path)

    if image is None:
        print(f"Error loading image: {file_path}")
        continue  # Skip to the next image if loading fails

    # Perform topological data analysis on the image
    diagrams = perform_tda(image)

    # Visualize persistence diagrams
    plot_diagrams(diagrams, show=True)

    # Further analysis (Example: Compute the number of persistent features)
    num_features_dim0 = len(diagrams[0])  # Number of features in dimension 0
    num_features_dim1 = len(diagrams[1])  # Number of features in dimension 1

    print(f"File: {file_path}")
    print(f"Number of persistent features in dimension 0: {num_features_dim0}")
    print(f"Number of persistent features in dimension 1: {num_features_dim1}")

    # Perform additional analysis or visualization as needed based on the diagrams
    # For instance, you can create bar plots, statistics, or custom visualizations of the diagrams.